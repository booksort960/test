const关键字
可以有很多用处，比如：

 

> #define ROW 10

就代表ROW的值恒为10，不可修改。
而

> const int ROW=10;

也可以将值恒定，无法修改。还有

```c
const int num[10];//将数组整个保护，无法修改。
```
但，并不是将被保护量变为常量，而是在处理时将其看为常量，不能对其修改。
**当const与指针结合**
我们先来看看这个

```c
const int num[] = { 1,2,3,4,5 };
	int* p = num;
	num[0] = 10;
	*p = 10;
```
![在这里插入图片描述](https://img-blog.csdnimg.cn/20210128162543800.png)

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210128162525706.png)
这就会报错，但用指针去修改就不会有任何问题。指针并不是const指针。
但是，
比如
```c
int num[] = { 1,2,3,4,5 };
const int* p=num;
```
定义了一个指向num数组的指针，又const指针p指向了num数组的首元素，**也就是p中储存了num[0]的地址**。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20210128163030247.png)
而这个，可以数组元素直接修改，但不能通过指针。不过可以又++p，让指针指向别处。也就是说，指针可以自增。但是自增后比不意味着，p没了const修饰，指针依旧不能去修改指针指向的值。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20210128163415650.png)
并且，也不能通过指针移动数组表示法去修改，与上面描述的是一个意思。
**不允许使用指针去修改指针指向的数据的值**。

![在这里插入图片描述](https://img-blog.csdnimg.cn/20210128163609415.png)
还有一种

> int* const p;

这种类型，与上面的有差异。
这种类型，是不能改变指针指向的。但是却可以利用指针去修改数组元素。
![在这里插入图片描述](https://img-blog.csdnimg.cn/20210128164550677.png)
这种是不能指向别处的指针，只能指向初始化设置的地址。
再加一句
**被const修饰的数组是不能赋给非const的指针。为了防止数组元素被修改。**